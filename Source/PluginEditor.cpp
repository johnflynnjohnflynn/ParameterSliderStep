/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
AudioProcessorParameterPluginAudioProcessorEditor::AudioProcessorParameterPluginAudioProcessorEditor (AudioProcessorParameterPluginAudioProcessor& p)
    : AudioProcessorEditor (&p),
      boolLabel_  {String::empty, "AudioParameterBool"}, // (No component name, just set label text)
      floatLabel_ {String::empty, "AudioParameterFloat"},
      intLabel_   {String::empty, "AudioParameterInt"},
      boolSlider_  {*p.getParameters()[boolName]},
      floatSlider_ {*p.getParameters()[floatName]},
      intSlider_   {*p.getParameters()[intName]},
      processor (p)
{
    addAndMakeVisible (boolSlider_);
    addAndMakeVisible (floatSlider_);
    addAndMakeVisible (intSlider_);
    
    addAndMakeVisible (boolLabel_);
    addAndMakeVisible (floatLabel_);
    addAndMakeVisible (intLabel_);

    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    const int numRows = p.getNumParameters();
    const int height = numRows * 48 + 24;               // obviously named constants
    setSize (512, height);                              // would be better here!
}

AudioProcessorParameterPluginAudioProcessorEditor::~AudioProcessorParameterPluginAudioProcessorEditor()
{
}

//==============================================================================
void AudioProcessorParameterPluginAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::lightgrey);
}

void AudioProcessorParameterPluginAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..

    const int unit = 8;
    const int margin = 2 * unit;
    const int offsetAdd = 4 * unit;
    const int offsetMult = 6 * unit;
    const int sliderWidth = 60 * unit;
    const int sliderHeight = 3 * unit;

    boolSlider_ .setBounds (margin, offsetAdd + 0 * offsetMult, sliderWidth, sliderHeight);
    floatSlider_.setBounds (margin, offsetAdd + 1 * offsetMult, sliderWidth, sliderHeight);
    intSlider_  .setBounds (margin, offsetAdd + 2 * offsetMult, sliderWidth, sliderHeight);

    boolLabel_  .setBounds (margin, 12 + 0 * offsetMult, sliderWidth, sliderHeight);
    floatLabel_ .setBounds (margin, 12 + 1 * offsetMult, sliderWidth, sliderHeight);
    intLabel_   .setBounds (margin, 12 + 2 * offsetMult, sliderWidth, sliderHeight);

}
